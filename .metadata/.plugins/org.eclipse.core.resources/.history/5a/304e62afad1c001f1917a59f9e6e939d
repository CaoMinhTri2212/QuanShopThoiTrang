package View;

import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import Controller.sqlconnect;
import Model.HoaDon;
import Model.NhanVien;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JComboBox;
import java.awt.Font;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;

public class FormHoaDon extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JComboBox<String> cbxMaNV;
    private JButton btnTaoHoaDon;
    private JLabel lblMKhuynMi;
    private JComboBox<String> cbxmakhuyenmai;
    private JLabel lblNewLabel;

    private sqlconnect con;
    private Connection connection;
    ArrayList<HoaDon> listhoadon;
    private JComboBox<String> cbxMaKH;
    private JButton btnUpdate;
    private JButton btnResport;
    DefaultTableModel defaultTableModel;
    JTable table;
    private JButton btnupdatethanhtien;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    FormHoaDon frame = new FormHoaDon();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     */
    public FormHoaDon() {
        con = new sqlconnect("jdbc:oracle:thin:@localhost:1521:orclp", "SYS as SYSDBA", "123");
        connection = con.getCon();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 1008, 520);
        contentPane = new JPanel();
        contentPane.setBackground(new Color(255, 255, 255));
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        JLabel lbngayhethong = new JLabel("");
        lbngayhethong.setForeground(new Color(0, 0, 255));
        lbngayhethong.setFont(new Font("Times New Roman", Font.ITALIC, 10));
        lbngayhethong.setBounds(855, 26, 100, 20);
        contentPane.add(lbngayhethong);
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        lbngayhethong.setText(currentDate.format(formatter));

        JLabel lblNgayLap = new JLabel("Ngày Lập:");
        lblNgayLap.setFont(new Font("Times New Roman", Font.BOLD, 12));
        lblNgayLap.setBounds(674, 26, 100, 20);
        contentPane.add(lblNgayLap);

        JLabel lblMaKH = new JLabel("Mã Khách Hàng:");
        lblMaKH.setFont(new Font("Times New Roman", Font.BOLD, 12));
        lblMaKH.setBounds(723, 92, 246, 20);
        contentPane.add(lblMaKH);

        JLabel lblMaNV = new JLabel("Mã Nhân Viên:");
        lblMaNV.setFont(new Font("Times New Roman", Font.BOLD, 12));
        lblMaNV.setBounds(723, 122, 100, 20);
        contentPane.add(lblMaNV);

        cbxMaNV = new JComboBox<>();
        cbxMaNV.setBounds(833, 122, 136, 20);
        contentPane.add(cbxMaNV);

        btnTaoHoaDon = new JButton("Tạo Hóa Đơn");
        btnTaoHoaDon.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    String ngayLap = lbngayhethong.getText().toString().trim();
                    String maKH = cbxMaKH.getSelectedItem().toString();
                    String maNV = cbxMaNV.getSelectedItem().toString();
                    String maKM = cbxmakhuyenmai.getSelectedItem().toString();

                    String sql = "INSERT INTO HoaDon(ngayLap, maKH, maNV, maKM) VALUES (TO_DATE(?, 'YYYY-MM-DD'), ?, ?, ?)";

                    PreparedStatement statement = connection.prepareStatement(sql);

                    statement.setString(1, ngayLap);
                    statement.setString(2, maKH);
                    statement.setString(3, maNV);
                    statement.setString(4, maKM);

                    int rowsInserted = statement.executeUpdate();

                    if (rowsInserted > 0) {
                        JOptionPane.showMessageDialog(FormHoaDon.this, "Hóa đơn đã được tạo thành công!");

                        cbxMaKH.setSelectedIndex(0);
                        cbxMaNV.setSelectedIndex(0);
                        cbxmakhuyenmai.setSelectedIndex(0);

                        showTableHoaDon(); // Refresh table data after adding new invoice
                    } else {
                        JOptionPane.showMessageDialog(FormHoaDon.this, "Đã xảy ra lỗi khi tạo hóa đơn. Vui lòng thử lại sau!");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(FormHoaDon.this, "Đã xảy ra lỗi khi tạo hóa đơn. Vui lòng thử lại sau!");
                }
            }
        });

        btnTaoHoaDon.setBackground(new Color(0, 0, 255));
        btnTaoHoaDon.setForeground(new Color(255, 255, 255));
        btnTaoHoaDon.setBounds(769, 236, 150, 30);
        contentPane.add(btnTaoHoaDon);

        lblMKhuynMi = new JLabel("Mã Khuyến mãi:");
        lblMKhuynMi.setFont(new Font("Times New Roman", Font.BOLD, 12));
        lblMKhuynMi.setBounds(723, 152, 100, 20);
        contentPane.add(lblMKhuynMi);

        cbxmakhuyenmai = new JComboBox<>();
        cbxmakhuyenmai.setBounds(833, 152, 136, 20);
        contentPane.add(cbxmakhuyenmai);

        lblNewLabel = new JLabel("Tạo Hóa Đơn");
        lblNewLabel.setForeground(new Color(255, 0, 0));
        lblNewLabel.setFont(new Font("Times New Roman", Font.BOLD, 30));
        lblNewLabel.setBounds(177, 26, 255, 42);
        contentPane.add(lblNewLabel);

        cbxMaKH = new JComboBox<>();
        cbxMaKH.setBounds(833, 92, 136, 20);
        contentPane.add(cbxMaKH);

        btnUpdate = new JButton("Cập nhât thành tiền");
        btnUpdate.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) {
                int maHD = Integer.parseInt(defaultTableModel.getValueAt(selectedRow, 0).toString());
                updateThanhTien(maHD);
                showTableHoaDon(); // Refresh table data
            } else {
                JOptionPane.showMessageDialog(FormHoaDon.this, "Vui lòng chọn một hóa đơn để cập nhật!");
            }
        });
        btnUpdate.setForeground(Color.WHITE);
        btnUpdate.setBackground(Color.BLUE);
        btnUpdate.setBounds(149, 419, 150, 30);
        contentPane.add(btnUpdate);

        btnResport = new JButton("In Hóa Đơn");
        btnResport.setForeground(Color.WHITE);
        btnResport.setBackground(Color.BLUE);
        btnResport.setBounds(722, 419, 150, 30);
        contentPane.add(btnResport);

        JPanel panel = new JPanel();
        panel.setBounds(38, 78, 675, 297);

        contentPane.add(panel);
        panel.setLayout(null);
        defaultTableModel = new DefaultTableModel();
        table = new JTable(defaultTableModel);
        table.setBackground(new Color(255, 255, 255));
        JScrollPane jScrollPane = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane.setBounds(0, 0, 675, 297);
        panel.add(jScrollPane);
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting() && table.getSelectedRow() >= 0) {
                    int selectedRow = table.getSelectedRow();
                    cbxMaKH.setSelectedItem(defaultTableModel.getValueAt(selectedRow, 2).toString());
                    cbxMaNV.setSelectedItem(defaultTableModel.getValueAt(selectedRow, 3).toString());
                    cbxmakhuyenmai.setSelectedItem(defaultTableModel.getValueAt(selectedRow, 4).toString());
                }
            }
        });

        showcbxmaKM();
        showcbxMANV();
        showcbxmaKH();

        defaultTableModel.setColumnIdentifiers(new Object[]{"Mã HD", "Ngày Lập", "Mã Khách Hàng", "Mã Nhân Viên", "Mã KM", "Thành Tiền"});
        table.setModel(defaultTableModel);
        
        btnupdatethanhtien = new JButton("Cập nhật thành tiền mới ");
        
        btnupdatethanhtien.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    int maHD = Integer.parseInt(defaultTableModel.getValueAt(selectedRow, 0).toString());
                    int tongTien = getTongTienTuChiTietHoaDon(maHD);
                    updateThanhTienIncrement(maHD, tongTien);
                    showTableHoaDon(); // Cập nhật lại dữ liệu bảng
                } else {
                    JOptionPane.showMessageDialog(FormHoaDon.this, "Vui lòng chọn một hóa đơn để cập nhật!");
                }
            }
        });

        btnupdatethanhtien.setForeground(Color.WHITE);
        btnupdatethanhtien.setBackground(Color.BLUE);
        btnupdatethanhtien.setBounds(436, 419, 150, 30);
        contentPane.add(btnupdatethanhtien);

        showTableHoaDon();
    }

    public ArrayList<HoaDon> getlistHoadon() {
        ArrayList<HoaDon> listHD = new ArrayList<HoaDon>();
        String sqlString = "Select * from HoaDon";
        try {
            PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                HoaDon hd = new HoaDon();
                hd.setMahd(Integer.parseInt(resultSet.getString("maHD")));
                hd.setNgaylap(resultSet.getDate("ngayLap"));
                hd.setManv(Integer.parseInt(resultSet.getString("maNV")));
                hd.setMakh(Integer.parseInt(resultSet.getString("maKH")));
                hd.setMakm(Integer.parseInt(resultSet.getString("maKM")));
                hd.setThanhtien(Integer.parseInt(resultSet.getString("thanhtien")));
                listHD.add(hd);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return listHD;
    }

    public void showTableHoaDon() {
        defaultTableModel.setRowCount(0);
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            String sql = "SELECT maHD, ngayLap, maKH, maNV, maKM, thanhTien FROM HoaDon";
            preparedStatement = connection.prepareStatement(sql);
            resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                int maHD = resultSet.getInt("maHD");
                Date ngayLap = resultSet.getDate("ngayLap");
                int maKH = resultSet.getInt("maKH");
                int maNV = resultSet.getInt("maNV");
                int maKM = resultSet.getInt("maKM");
                int thanhTien = resultSet.getInt("thanhTien");

                defaultTableModel.addRow(new Object[]{maHD, ngayLap, maKH, maNV, maKM, thanhTien});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi hiển thị hóa đơn: " + e.getMessage());
        } finally {
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public void showcbxMANV() {
        try {
            String sqlString = "Select maNV from NhanVien";
            PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                cbxMaNV.addItem(resultSet.getString("maNV"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void showcbxmaKM() {
        try {
            String sqlString = "Select maKM from KhuyenMai";
            PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                cbxmakhuyenmai.addItem(resultSet.getString("maKM"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void showcbxmaKH() {
        try {
            String sqlString = "Select maKH from KhachHang";
            PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                cbxMaKH.addItem(resultSet.getString("maKH"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateThanhTien(int maHD) {
        CallableStatement callableStatement = null;
        try {
            callableStatement = connection.prepareCall("{CALL PROC_CAPNHAT_THANHTIEN(?)}");
            callableStatement.setInt(1, maHD);
            callableStatement.execute();
            JOptionPane.showMessageDialog(this, "Cập nhật thành tiền thành công!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thành tiền: " + e.getMessage());
        } finally {
            try {
                if (callableStatement != null) callableStatement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    private void updateThanhTienIncrement(int maHD, int themTien) {
        CallableStatement callableStatement = null;
        try {
            callableStatement = connection.prepareCall("{CALL PROC_CAPNHAT_THANHTIEN_INCREMENT(?, ?)}");
            callableStatement.setInt(1, maHD);
            callableStatement.setInt(2, themTien);
            callableStatement.execute();
            JOptionPane.showMessageDialog(this, "Thành tiền đã được cập nhật!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thành tiền: " + e.getMessage());
        } finally {
            try {
                if (callableStatement != null) callableStatement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    private int getTongTienTuChiTietHoaDon(int maHD) {
        int tongTien = 0;
        try {
            String sqlString = "SELECT SUM(tongtien) AS TongTien FROM CHITIET_HOADON WHERE maHD = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setInt(1, maHD);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                tongTien = resultSet.getInt("tongtien");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tongTien;
    }

}
