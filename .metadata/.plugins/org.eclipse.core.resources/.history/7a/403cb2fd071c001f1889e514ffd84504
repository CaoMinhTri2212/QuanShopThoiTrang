package View;

import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import Controller.sqlconnect;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JComboBox;
import java.awt.Font;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class FormHoaDon extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JComboBox cbxMaNV;
    private JButton btnTaoHoaDon;
    private JLabel lblMKhuynMi;
    private JComboBox cbxmakhuyenmai;
    private JLabel lblNewLabel;
    
    private sqlconnect con;
    private Connection connection;
    private JComboBox<String> cbxMaKH;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    FormHoaDon frame = new FormHoaDon();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     */
    public FormHoaDon() {
    	con = new sqlconnect("jdbc:oracle:thin:@localhost:1521:orclp", "SYS as SYSDBA", "123");
	    connection = con.getCon();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 544, 389);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        JLabel lbngayhethong = new JLabel("");
        lbngayhethong.setBounds(205, 141, 100, 20);
        contentPane.add(lbngayhethong);
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        lbngayhethong.setText(currentDate.format(formatter));

        JLabel lblNgayLap = new JLabel("Ngày Lập:");
        lblNgayLap.setBounds(95, 141, 100, 20);
        contentPane.add(lblNgayLap);

        JLabel lblMaKH = new JLabel("Mã Khách Hàng:");
        lblMaKH.setBounds(95, 181, 100, 20);
        contentPane.add(lblMaKH);

        JLabel lblMaNV = new JLabel("Mã Nhân Viên:");
        lblMaNV.setBounds(95, 221, 100, 20);
        contentPane.add(lblMaNV);

        cbxMaNV = new JComboBox<String>();
        cbxMaNV.setBounds(205, 221, 200, 20);
        contentPane.add(cbxMaNV);

        btnTaoHoaDon = new JButton("Tạo Hóa Đơn");
        btnTaoHoaDon.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                   
                
                    String ngayLap = lbngayhethong.getText().toString().trim();
                    String maKH = cbxMaKH.getSelectedItem().toString();
                    String maNV = cbxMaNV.getSelectedItem().toString();
                    String maKM = cbxmakhuyenmai.getSelectedItem().toString();
                    
                   
                    String sql = "INSERT INTO HoaDon(ngayLap, maKH, maNV, maKM) VALUES ( TO_DATE(?, 'YYYY-MM-DD'), ?, ?, ?)";
                    
                   
                    PreparedStatement statement = connection.prepareStatement(sql);
                    
 

                    statement.setString(1, ngayLap);
                    statement.setString(2, maKH);
                    statement.setString(3, maNV);
                    statement.setString(4, maKM);
                    
                    // Thực thi câu lệnh SQL
                    int rowsInserted = statement.executeUpdate();
                    
                    if (rowsInserted > 0) {
                        JOptionPane.showMessageDialog(FormHoaDon.this, "Hóa đơn đã được tạo thành công!");
                        
                     
                  
                       
                        cbxMaKH.setSelectedIndex(0);
                        cbxMaNV.setSelectedIndex(0); 
                        cbxmakhuyenmai.setSelectedIndex(0);
                        
                        setVisible(false);
                     
                        FormMain mainForm = new FormMain();
                        mainForm.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(FormHoaDon.this, "Đã xảy ra lỗi khi tạo hóa đơn. Vui lòng thử lại sau!");
                    }
                } catch (Exception ex) {
                    // Xử lý nếu có lỗi
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(FormHoaDon.this, "Đã xảy ra lỗi khi tạo hóa đơn. Vui lòng thử lại sau!");
                }
            }
        });


        btnTaoHoaDon.setBackground(new Color(0, 0, 255));
        btnTaoHoaDon.setForeground(new Color(255, 255, 255));
        btnTaoHoaDon.setBounds(215, 294, 150, 30);
        contentPane.add(btnTaoHoaDon);
        
        lblMKhuynMi = new JLabel("Mã Khuyến mãi:");
        lblMKhuynMi.setBounds(95, 264, 100, 20);
        contentPane.add(lblMKhuynMi);
        
        cbxmakhuyenmai = new JComboBox<String>();
        cbxmakhuyenmai.setBounds(205, 264, 200, 20);
        contentPane.add(cbxmakhuyenmai);
        
        lblNewLabel = new JLabel("Tạo Hóa Đơn");
        lblNewLabel.setForeground(new Color(255, 0, 0));
        lblNewLabel.setFont(new Font("Times New Roman", Font.BOLD, 30));
        lblNewLabel.setBounds(177, 26, 255, 42);
        contentPane.add(lblNewLabel);
        
        cbxMaKH = new JComboBox<String>();
        cbxMaKH.setBounds(205, 181, 200, 20);
        contentPane.add(cbxMaKH);
        showcbxmaKM();
        showcbxMANV();
        showcbxmaKH();
    }
    public void showcbxMANV()
	{
		try {
			String sqlString="Select maNV from NhanVien";
			PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
			ResultSet resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{
				cbxMaNV.addItem(resultSet.getString("maNV"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
    public void showcbxmaKM()
	{
		try {
			String sqlString="Select maKM from KhuyenMai";
			PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
			ResultSet resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{
				cbxmakhuyenmai.addItem(resultSet.getString("maKM"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
    public void showcbxmaKH()
	{
		try {
			String sqlString="Select maKH from KhachHang";
			PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
			ResultSet resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{
				cbxMaKH.addItem(resultSet.getString("maKH"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
}
