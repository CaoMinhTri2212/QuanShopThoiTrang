package View;

import java.awt.EventQueue;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.JInternalFrame;

import Controller.sqlconnect;
import Model.NhanVien;
import Model.SanPham;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import java.awt.Font;
import java.awt.BorderLayout;
import java.awt.Color;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.TitledBorder;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class FormSanPham extends JInternalFrame {

	private static final long serialVersionUID = 1L;
	private sqlconnect con;
	private Connection connection;
	DefaultTableModel defaultTableModel;
	JTable table;
	ArrayList<SanPham>listSanPham;
	private JTextField edtmasp;
	private JTextField edttnsp;
	private JTextField txtAnhSP;
	private JTextField edtgiaban;
	private JTextField edtgiasi;
	private JTextField edtgianhap;
	private JTextField edtmota;
	private JTextField edtgiatang;
	private JTextField edtsoluong;
	JComboBox cbxkichco,cbxmau,cbxtheloai,cbxnhacungcap;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FormSanPham frame = new FormSanPham();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public FormSanPham() {
		getContentPane().setBackground(new Color(240, 240, 240));
		con = new sqlconnect("jdbc:oracle:thin:@localhost:1521:orclp", "SYS as SYSDBA", "123");
		connection = con.getCon();
		
		setBounds(327, 0, 1008, 734);
		getContentPane().setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Sản Phẩm ");
		lblNewLabel.setForeground(new Color(255, 0, 0));
		lblNewLabel.setBackground(new Color(255, 0, 0));
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 36));
		lblNewLabel.setBounds(78, 17, 211, 64);
		getContentPane().add(lblNewLabel);
		
		JPanel panel = new JPanel();
		panel.setBounds(22, 115, 960, 307);
		getContentPane().add(panel);
		panel.setLayout(null);
		
		
		table = new JTable(defaultTableModel);
		table.setBackground(new Color(255, 255, 255));
		JScrollPane jScrollPane = new JScrollPane(table,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		jScrollPane.setBounds(0, 0, 960, 307);
		panel.add(jScrollPane);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBorder(new TitledBorder(null, "Th\u00F4ng tin s\u1EA3n ph\u1EA9m", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_1.setBounds(39, 450, 943, 229);
		getContentPane().add(panel_1);
		panel_1.setLayout(null);
		
		JLabel lblNewLabel_1 = new JLabel("Mã sản phẩm:");
		lblNewLabel_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1.setBounds(32, 36, 117, 14);
		panel_1.add(lblNewLabel_1);
		
		JLabel lblNewLabel_1_1 = new JLabel("Tên sản phẩm:");
		lblNewLabel_1_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_1.setBounds(32, 61, 117, 14);
		panel_1.add(lblNewLabel_1_1);
		
		JLabel lblNewLabel_1_2 = new JLabel("Kích cỡ:");
		lblNewLabel_1_2.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2.setBounds(32, 85, 95, 14);
		panel_1.add(lblNewLabel_1_2);
		
		JLabel lblNewLabel_1_2_1 = new JLabel("Màu:");
		lblNewLabel_1_2_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1.setBounds(32, 113, 95, 14);
		panel_1.add(lblNewLabel_1_2_1);
		
		JLabel lblNewLabel_1_2_1_1 = new JLabel("Thể loại:");
		lblNewLabel_1_2_1_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1.setBounds(32, 137, 95, 14);
		panel_1.add(lblNewLabel_1_2_1_1);
		
		JLabel lblNewLabel_1_2_1_1_1 = new JLabel("Ảnh:");
		lblNewLabel_1_2_1_1_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1_1.setBounds(548, 36, 95, 14);
		panel_1.add(lblNewLabel_1_2_1_1_1);
		
		JLabel lblNewLabel_1_2_1_1_1_1 = new JLabel("Giá bán:");
		lblNewLabel_1_2_1_1_1_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1_1_1.setBounds(548, 85, 95, 14);
		panel_1.add(lblNewLabel_1_2_1_1_1_1);
		
		JLabel lblNewLabel_1_2_1_1_1_1_1 = new JLabel("Giá sỉ:");
		lblNewLabel_1_2_1_1_1_1_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1_1_1_1.setBounds(548, 113, 95, 14);
		panel_1.add(lblNewLabel_1_2_1_1_1_1_1);
		
		JLabel lblNewLabel_1_2_1_1_1_1_2 = new JLabel("Nhà cung cấp:");
		lblNewLabel_1_2_1_1_1_1_2.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1_1_1_2.setBounds(548, 61, 117, 14);
		panel_1.add(lblNewLabel_1_2_1_1_1_1_2);
		
		JLabel lblNewLabel_1_2_1_1_1_1_2_1 = new JLabel("Giá nhập:");
		lblNewLabel_1_2_1_1_1_1_2_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1_1_1_2_1.setBounds(548, 137, 95, 14);
		panel_1.add(lblNewLabel_1_2_1_1_1_1_2_1);
		
		edtmasp = new JTextField();
		edtmasp.setBounds(152, 35, 305, 20);
		panel_1.add(edtmasp);
		edtmasp.setColumns(10);
		
		edttnsp = new JTextField();
		edttnsp.setColumns(10);
		edttnsp.setBounds(152, 60, 305, 20);
		panel_1.add(edttnsp);
		
		txtAnhSP = new JTextField();
		txtAnhSP.setColumns(10);
		txtAnhSP.setBounds(653, 36, 228, 20);
		panel_1.add(txtAnhSP);
		
		edtgiaban = new JTextField();
		edtgiaban.setColumns(10);
		edtgiaban.setBounds(653, 85, 228, 20);
		panel_1.add(edtgiaban);
		
		edtgiasi = new JTextField();
		edtgiasi.setColumns(10);
		edtgiasi.setBounds(653, 113, 228, 20);
		panel_1.add(edtgiasi);
		
		edtgianhap = new JTextField();
		edtgianhap.setColumns(10);
		edtgianhap.setBounds(653, 137, 228, 20);
		panel_1.add(edtgianhap);
		
		JLabel lblNewLabel_1_2_1_1_2 = new JLabel("Số lượng");
		lblNewLabel_1_2_1_1_2.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1_2.setBounds(32, 169, 95, 20);
		panel_1.add(lblNewLabel_1_2_1_1_2);
		
		JLabel lblNewLabel_1_2_1_1_1_1_2_1_1 = new JLabel("Mô tả:");
		lblNewLabel_1_2_1_1_1_1_2_1_1.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1_1_1_2_1_1.setBounds(32, 199, 95, 14);
		panel_1.add(lblNewLabel_1_2_1_1_1_1_2_1_1);
		
		edtmota = new JTextField();
		edtmota.setColumns(10);
		edtmota.setBounds(152, 199, 730, 20);
		panel_1.add(edtmota);
		
		cbxkichco = new JComboBox();
		cbxkichco.setBounds(152, 85, 305, 21);
		panel_1.add(cbxkichco);
		
		cbxmau = new JComboBox();
		cbxmau.setBounds(152, 112, 305, 21);
		panel_1.add(cbxmau);
		
		cbxtheloai = new JComboBox();
		cbxtheloai.setBounds(152, 136, 305, 21);
		panel_1.add(cbxtheloai);
		
		cbxnhacungcap = new JComboBox();
		cbxnhacungcap.setBounds(653, 60, 228, 21);
		panel_1.add(cbxnhacungcap);
		
		JLabel lblNewLabel_1_2_1_1_1_1_2_1_2 = new JLabel("Giá tăng");
		lblNewLabel_1_2_1_1_1_1_2_1_2.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel_1_2_1_1_1_1_2_1_2.setBounds(548, 161, 95, 26);
		panel_1.add(lblNewLabel_1_2_1_1_1_1_2_1_2);
		
		edtgiatang = new JTextField();
		edtgiatang.setColumns(10);
		edtgiatang.setBounds(653, 165, 228, 20);
		panel_1.add(edtgiatang);
		
		edtsoluong = new JTextField();
		edtsoluong.setColumns(10);
		edtsoluong.setBounds(152, 165, 305, 20);
		panel_1.add(edtsoluong);
		
		JButton btnInsert = new JButton("Thêm Sản Phẩm");
		btnInsert.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				themSP();
			}
		});
		btnInsert.setBackground(new Color(0, 0, 0));
		btnInsert.setForeground(new Color(255, 255, 255));
		btnInsert.setBounds(373, 49, 141, 21);
		getContentPane().add(btnInsert);
		
		JButton btn_update = new JButton("Sửa Sản Phẩm");
		btn_update.setForeground(new Color(255, 255, 255));
		btn_update.setBackground(new Color(0, 0, 0));
		btn_update.setBounds(553, 49, 141, 21);
		getContentPane().add(btn_update);
		
		JButton btnXaSnPhm = new JButton("Xóa Sản Phẩm");
		table.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = table.getSelectedRow();
                edtmasp.setText(table.getModel().getValueAt(row, 0).toString());
                edttnsp.setText(table.getModel().getValueAt(row, 1).toString());
                cbxkichco.setSelectedItem(table.getModel().getValueAt(row, 2).toString());
                cbxmau.setSelectedItem(table.getModel().getValueAt(row, 3).toString());
                cbxtheloai.setSelectedItem(table.getModel().getValueAt(row, 4).toString());
                txtAnhSP.setText(table.getModel().getValueAt(row, 5).toString());
                edtgiaban.setText(table.getModel().getValueAt(row, 6).toString());
                edtgiasi.setText(table.getModel().getValueAt(row, 7).toString());
                edtgianhap.setText(table.getModel().getValueAt(row, 8).toString());
                edtmota.setText(table.getModel().getValueAt(row, 9).toString());
                edtgiatang.setText(table.getModel().getValueAt(row, 10).toString());
                cbxnhacungcap.setSelectedItem(table.getModel().getValueAt(row, 11).toString());
                edtsoluong.setText(table.getModel().getValueAt(row, 12).toString());
            }
        });
		btnXaSnPhm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				xoaSP();
				showTableSanPham();
			}
		});
		btnXaSnPhm.setForeground(new Color(255, 255, 255));
		btnXaSnPhm.setBackground(new Color(0, 0, 0));
		btnXaSnPhm.setBounds(748, 49, 141, 21);
		getContentPane().add(btnXaSnPhm);
		
		
		defaultTableModel=(DefaultTableModel)table.getModel();
		defaultTableModel.setColumnIdentifiers(new Object[] {
				"MaSP","Tên SP","Kich cỡ","Màu","Thể loại","Số lượng","Giá bán","Mô tả"
		});
		showTableSanPham();
		showcbxkichco();
		showcbxMau();
		showcbxNCC();
		showcbxTL();
		

	}
	public void showTableSanPham() {
	    defaultTableModel.setRowCount(0);
	    CallableStatement callableStatement = null;
	    ResultSet resultSet = null;

	    try {
	        String sql = "{call proc_hienthisp(?)}";
	        callableStatement = connection.prepareCall(sql);
	        callableStatement.registerOutParameter(1, java.sql.Types.REF_CURSOR);

	        callableStatement.execute();

	        resultSet = (ResultSet) callableStatement.getObject(1);

	        while (resultSet.next()) {
	        	int masp =Integer.parseInt(resultSet.getString("maSP"));
	        	String tesp =resultSet.getString("tenSP");
	        	int kichco = Integer.parseInt(resultSet.getString("kichCo"));
	        	int mau = Integer.parseInt(resultSet.getString("mau"));
	        	int theloai = Integer.parseInt(resultSet.getString("theLoai"));
	        	int soluong = Integer.parseInt(resultSet.getString("soluong"));
	        	int giaban = Integer.parseInt(resultSet.getString("giaBan"));
	        	String mota = resultSet.getString("mota");
	        	
	        	
	           
	            defaultTableModel.addRow(new Object[] {masp,tesp, kichco,mau,theloai,soluong,giaban,mota});
	        }

	    } catch (SQLException e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(this, "Lỗi khi hiển thị san phẩm: " + e.getMessage());
	    } finally {
	        try {
	            if (resultSet != null) resultSet.close();
	            if (callableStatement != null) callableStatement.close();
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }
	}
	public void showcbxkichco()
	{
		try {
			String sqlString="Select maKC from KichCo";
			PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
			ResultSet resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{
				cbxkichco.addItem(resultSet.getString("maKC"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	public void showcbxTL()
	{
		try {
			String sqlString="Select maTL from TheLoai";
			PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
			ResultSet resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{
				cbxtheloai.addItem(resultSet.getString("maTL"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	public void showcbxNCC()
	{
		try {
			String sqlString="Select maNCC from NhaCungCap";
			PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
			ResultSet resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{
				cbxnhacungcap.addItem(resultSet.getString("maNCC"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	public void showcbxMau()
	{
		try {
			String sqlString="Select maMau from Mau";
			PreparedStatement preparedStatement = connection.prepareStatement(sqlString);
			ResultSet resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{
				cbxmau.addItem(resultSet.getString("maMau"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	public void themSP() {
	    try {
	        int maSP = Integer.parseInt(edtmasp.getText());
	        String tenSP = edttnsp.getText();
	        int kichCo = Integer.parseInt(cbxkichco.getSelectedItem().toString());
	        int mau = Integer.parseInt(cbxmau.getSelectedItem().toString());
	        int theLoai = Integer.parseInt(cbxtheloai.getSelectedItem().toString());
	        String anh = txtAnhSP.getText();
	        int nhaCungCap = Integer.parseInt(cbxnhacungcap.getSelectedItem().toString());
	        int soLuong = Integer.parseInt(edtsoluong.getText());
	        int giaNhap = Integer.parseInt(edtgianhap.getText());
	        int giaBan = Integer.parseInt(edtgiaban.getText());
	        int giaBanSi = Integer.parseInt(edtgiasi.getText());
	        int giaTang = Integer.parseInt(edtgiatang.getText());
	        String moTa = edtmota.getText();

	        String sql = "{CALL AddProduct(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}";
	        CallableStatement callableStatement = connection.prepareCall(sql);
	        callableStatement.setInt(1, maSP);
	        callableStatement.setString(2, tenSP);
	        callableStatement.setInt(3, kichCo);
	        callableStatement.setInt(4, mau);
	        callableStatement.setInt(5, theLoai);
	        callableStatement.setString(6, anh);
	        callableStatement.setInt(7, nhaCungCap);
	        callableStatement.setInt(8, soLuong);
	        callableStatement.setInt(9, giaNhap);
	        callableStatement.setInt(10, giaBan);
	        callableStatement.setInt(11, giaBanSi);
	        callableStatement.setInt(12, giaTang);
	        callableStatement.setString(13, moTa);

	        callableStatement.execute();
	        JOptionPane.showMessageDialog(this, "Thêm sản phẩm thành công!");
	        showTableSanPham(); // Refresh the table to show the new product
	    } catch (SQLException e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(this, "Lỗi khi thêm sản phẩm: " + e.getMessage());
	    } catch (NumberFormatException e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(this, "Lỗi định dạng dữ liệu: " + e.getMessage());
	    }
	}
	public void xoaSP() {
	    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa sản phẩm này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
	    if (confirm == JOptionPane.YES_OPTION) {
	        try {
	            int maSP = Integer.parseInt(edtmasp.getText());

	            String sql = "{CALL DeleteProduct(?)}";
	            CallableStatement callableStatement = connection.prepareCall(sql);
	            callableStatement.setInt(1, maSP);

	            callableStatement.execute();
	            JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!");
	            showTableSanPham(); // Refresh the table to show the changes
	        } catch (SQLException e) {
	            e.printStackTrace();
	            JOptionPane.showMessageDialog(this, "Lỗi khi xóa sản phẩm: " + e.getMessage());
	        } catch (NumberFormatException e) {
	            e.printStackTrace();
	            JOptionPane.showMessageDialog(this, "Lỗi định dạng dữ liệu: " + e.getMessage());
	        }
	    }
	}

	

}
